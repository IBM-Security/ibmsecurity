[tox]
requires =
    setuptools>=65.3
    tox>=4.24.2
    tox-extra>=2.1
    tox-uv>=1.25
env_list =
    py
    py-devel
    lint
skip_missing_interpreters = true

[testenv]
description =
    Run the tests under {base_python}
    devel: and ansible devel branch
    pre: and enable --pre when installing dependencies, testing prereleases
package = editable
deps =
    devel: ansible-compat @ git+https://github.com/ansible/ansible-compat.git  # GPLv3+
    devel: ansible-core @ git+https://github.com/ansible/ansible.git  # GPLv3+
extras =
    test
pass_env =
    CI
    CURL_CA_BUNDLE
    FORCE_COLOR
    HOME
    LANG
    LC_*
    NO_COLOR
    PYTEST_*
    PYTEST_REQPASS
    PYTHON*
    PYTHONBREAKPOINT
    PYTHONIOENCODING
    PYTHONPYCACHEPREFIX
    PY_COLORS
    REQUESTS_CA_BUNDLE
    RTD_TOKEN
    SETUPTOOLS_SCM_DEBUG
    SSH_AUTH_SOCK
    SSL_CERT_FILE
    UV_*
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{env_dir}/.coverage.{env_name}}
    COVERAGE_PROCESS_START = {tox_root}/pyproject.toml
    FORCE_COLOR = 1
    PIP_CONSTRAINT = {tox_root}/.config/constraints.txt
    PIP_DISABLE_PIP_VERSION_CHECK = 1
    PRE_COMMIT_COLOR = always
    PYTEST_REQPASS = 910
    UV_CONSTRAINT = {tox_root}/.config/constraints.txt
    deps, devel, hook, lint, pkg, pre, py310, schemas: PIP_CONSTRAINT = /dev/null
    deps, devel, hook, lint, pkg, pre, py310, schemas: UV_CONSTRAINT = /dev/null
    devel: ANSIBLE_DEVEL_WARNING = false
    pre: PIP_PRE = 1
commands_pre =
    sh -c "rm -f {env_dir}/.coverage.* 2>/dev/null || true"
    {env_python} -m pip check
    bash ./tools/install-reqs.sh
    ansible --version
commands =
    sh -c "{env_python} -m pip freeze > {env_dir}/log/requirements.txt"
    coverage run -m pytest {posargs: \
      -n auto \
      -ra \
      --showlocals \
      --doctest-modules \
      --durations=10 \
      }
    {py,py310,py311,py312,py313}: sh -c "coverage combine -a -q --data-file={env_dir}/.coverage {work_dir}/*/.coverage.* && coverage xml --data-file={env_dir}/.coverage -o {env_dir}/coverage.xml --fail-under=0 && coverage report --data-file={env_dir}/.coverage"
allowlist_externals =
    ./tools/test-hook.sh
    bash
    find
    git
    pwd
    rm
    sh
    tox

[testenv:lint]
description = Run all linters
skip_install = true
deps =
    pre-commit>=4.1
    pre-commit-uv>=4.1.4
    pytest>=7.2.2  # to updated schemas
    setuptools>=51.1.1
pass_env =
    {[testenv]pass_env}
    PRE_COMMIT_HOME
commands_pre =
commands =
    {env_python} -m pre_commit run --all-files --show-diff-on-failure {posargs:}

[testenv:clean]
description = Remove temporary files
skip_install = true
deps =
commands_pre =
commands =
    find . -type d \( -name __pycache__ -o -name .mypy_cache \) -delete
    find . -type f \( -name '*.py[co]' -o -name ".coverage*" -o -name coverage.xml \) -delete
commands_post =
